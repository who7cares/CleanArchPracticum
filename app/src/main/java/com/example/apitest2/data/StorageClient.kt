package com.example.apitest2.data

interface StorageClient<T> {

    fun storageData(data: T)
    fun getData(): T?
}

/* По правилам чистой архитектуры, как и в случае с сетевыми запросами,
 нам необходимо прятать реализацию за абстракциями.
 Первая из таких абстракций - StorageClient. Это интерфейс,
 обеспечивающий хранение и получение сохранённых данных.

В нашей изначальной реализации мы используем SharedPreferences для хранения данных.
Но, как уже упоминалось, использование абстракций позволяет легко
заменить реализацию на другую, например, если вместо SharedPreferences
вы решите использовать DataStore. Данный интерфейс позволяет делать следующее:

- Сохранить объект «какого-то» типа в некоторое хранилище;
- Вытащить сохранённый объект из хранилища.

Благодаря использованию дженериков мы получаем гибкость не только в том,
какой именно инструмент будет использоваться для хранения,
но и в том, объекты какого типа это будут.


 */